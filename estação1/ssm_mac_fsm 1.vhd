-- VHDL Entity DNP3_802_11_lib.SSM_MAC.interface
--
-- Created:
--          by - Lucas.UNKNOWN (LUCAS-ACER64)
--          at - 16:02:48 23/07/2013
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
USE ieee.STD_LOGIC_UNSIGNED.all;



ENTITY SSM_MAC1 IS
   PORT( 
    -- general
    clk_80211          : IN     std_logic;
    rst_80211          : IN     std_logic;
--    myaddress          : in     std_logic_vector (47 downto 0);
--    destaddress        : in     std_logic_vector (47 downto 0);
    
    -- time management interface
    nav1                : in     std_logic;
    sifs_flag1          : in     std_logic;
    difs_flag1          : in     std_logic;
    backoff_flag1       : in     std_logic;
    sifs_req1           : out    std_logic;
    difs_req1           : out    std_logic;
    backoff_req1        : out    std_logic;
    nav_req1            : out    std_logic;       ----- Adicionado
    
    -- tcp_ip_llc interface
    sen_tcpipllc1      : IN     std_logic_vector (2719 DOWNTO 0);
    rec_tcpipllc1     : OUT    std_logic_vector (2719 DOWNTO 0);
    sta_send_ack1       : IN     std_logic;
    sta_rec_ack1        : OUT    std_logic;
    
    -- phy layer interface
    endtx1              : in     std_logic;
    endtx111             : in     std_logic; 
    channel_idle1       : in     std_logic;
    sta_rec_frame1      : IN     std_logic_vector (3007 DOWNTO 0);
    sta_rec_frame_len1  : IN     std_logic_vector (15 DOWNTO 0);
    sta_send_frame1     : OUT    std_logic_vector (3007 DOWNTO 0);
    sta_send_frame_len1 : OUT    std_logic_vector (15 DOWNTO 0)
    );
END SSM_MAC1 ;
 
ARCHITECTURE fsm OF SSM_MAC1 IS
 
   -- Architecture Declaration
   
   TYPE STATE_TYPE IS (
      Idle,
      PerformCCADIFS,
      TransRTS,
      WaitCTS,
      WaitEndTX,
      WaitACK,
      WaitDATA,
      WaitNAV,
      WaitBackoff,
      WaitSIFS,
      RecDATA
   );
 
    -- Declare current state signals
    SIGNAL current_state : STATE_TYPE;
    
    signal failure       : std_logic;
    signal performcca    : std_logic;
    signal endtransm     : std_logic;
    SIGNAL acktime       : std_logic;  
    SIGNAL backofftime   : std_logic;  
    SIGNAL ctstime       : std_logic;  
    SIGNAL datatime      : std_logic;  
    SIGNAL difstime      : std_logic;  
    SIGNAL rtstime       : std_logic;  
    SIGNAL sifstime      : std_logic;  
    SIGNAL starttransm   : std_logic;
    signal firstloop            : std_logic_vector (1 downto 0);
    signal duration             : std_logic_vector (15 downto 0);
    signal datagram_int         : std_logic_vector (15 downto 0);
    SIGNAL duration_int         : std_logic_vector (15 downto 0);
    SIGNAL duration_int_cts     : std_logic_vector (15 downto 0);
    SIGNAL duration_int_rts     : std_logic_vector (15 downto 0);
    SIGNAL duration_int_ack     : std_logic_vector (15 downto 0);
    SIGNAL duration_int_data    : std_logic_vector (15 downto 0);
    signal sen_frame_len_buffer : std_logic_vector (15 downto 0);
    signal rec_frame_len_buffer : std_logic_vector (15 downto 0); 
    signal datagram_len         : std_logic_vector (15 downto 0); 
    signal sen_frame_buffer     : std_logic_vector (3007 DOWNTO 0);
    signal rec_frame_buffer     : std_logic_vector (3007 DOWNTO 0);
    signal datagram_buffer      : std_logic_vector (2719 downto 0);
    signal VALOR1               : integer;
    signal VALOR2               : integer;
    signal VALOR3               : std_logic_vector (15 downto 0);
    signal VALOR4               : integer;
    signal VALOR5               : integer;
    signal VALOR6               : unsigned(7 downto 0);
    signal VALOR7               : unsigned(7 downto 0);
    
    constant ack_frame_fc       : std_logic_vector (15 downto 0) := x"80d4";
    constant rts_frame_fc       : std_logic_vector (15 downto 0) := x"84B4";
    constant cts_frame_fc       : std_logic_vector (15 downto 0) := x"84C4";
    constant data_frame_fc      : std_logic_vector (15 downto 0) := x"8708";
    constant rate_bps           : integer := 11534336; --11 Mbps * 1024 * 1024
    
    BEGIN
    duration_int_cts <= x"0014"; --30*8 000 000/ rate_bps
    duration_int_rts <= x"0018"; --36*8 000 000/ rate_bps
    duration_int_ack <= x"0014"; --30*8 000 000/ rate_bps

    fsm_mac_proc : process(clk_80211)
    begin
    if rising_edge(clk_80211) then
        if rst_80211 = '1' then
            firstloop <= "00";
            sifs_req1 <= '0';
            difs_req1 <= '0';
            rec_frame_buffer <= (others => '0');
            duration <= x"0000";
        else
            case current_state is
                ------------------------ generico ------------------------   
                when idle => 
                    IF sta_rec_frame1 (3007 downto 2992) = rts_frame_fc then --sta_rec_frame (3007 downto 2992) = rts_frame_fc then
                        if sta_rec_frame1 (2975 downto 2928) = x"000000000001" then
                        -- processar recepção
                        -- vá para wait sifs
                        sifs_req1 <= '1';
                        rec_frame_buffer <= sta_rec_frame1;
                        current_state <= WaitSIFS;
                        duration <= std_logic_vector (unsigned(sta_rec_frame1(2991 downto 2976))
                                                               -unsigned(duration_int_rts)); -- duration - rts time
                        else
                        -- quadro não pertence à este nó
                        current_state <= idle;
                        end if;
                    elsif sen_tcpipllc1 (2719 downto 2712) > x"00" then
                        -- processar envio
                        datagram_buffer <= sen_tcpipllc1;
                        datagram_len <= sen_tcpipllc1(2639 downto 2624);
                        if nav1 = '1' then
                            -- espere o período de contenção
                            current_state <= WaitNAV;
                        else
                            -- perform CCA
                            current_state <= PerformCCADIFS;
                        end if;
                    else
                        current_state <= idle;
                    end if;
                    
                when WaitSIFS => 
                    if firstloop = "00"  then
                        --duration cts = duration - sifs
                        duration <= std_logic_vector(unsigned(duration) - 28);
                        current_state <= WaitSIFS;
                        firstloop <= "01";
                        sifs_req1 <= '0';
                    elsif firstloop = "01" then
                        current_state <= WaitSIFS;
                        firstloop <= "10";
                        if rec_frame_buffer(3007 downto 2992) = rts_frame_fc then
                            
                            --montando frame CTS para envio
                            sen_frame_buffer (3007 downto 2992) <= x"84C4"; --cabeçalho cts
                            sen_frame_buffer (2991 downto 2976) <= x"0024";--duration field
                            sen_frame_buffer (2975 downto 2928) <= x"000000000001";--endereço desta estação
                            sen_frame_buffer (2927 downto 2896) <= x"ffffffff";--crc32bits 8 bytes
                            sen_frame_buffer (2895 downto 0) <= (others => '0');--zeros
                            sen_frame_len_buffer <= x"0070";
                        elsif rec_frame_buffer (3007 downto 2992) = data_frame_fc then
                            -- montando frame ACK para envio
                            sen_frame_buffer (3007 downto 2992) <= ack_frame_fc; --cabeçalho ack
                            sen_frame_buffer (2991 downto 2976) <= duration; --duration/id (15 downto 0) = #duração em microsegundos do ack
                            sen_frame_buffer (2975 downto 2928) <= x"000000000001"; --endereço de quem confirma
                            sen_frame_buffer (2927 downto 2896) <= x"ffffffff"; --crc32bits
                            sen_frame_len_buffer <= x"0070";
                        elsif rec_frame_buffer (3007 downto 2992) = cts_frame_fc then
                            -- montando frame DATA para envio
                            sen_frame_buffer (3007 downto 2992) <= x"8708";
                            sen_frame_buffer (2991 downto 2976) <= duration; --duration/id (15 downto 0) #duração em microsegundos data frame+ sifs+ ack frame
                            sen_frame_buffer (2975 downto 2928) <= x"000000000000"; --address1 (47 downto 0) = AP =não será setado
                            sen_frame_buffer (2927 downto 2880) <= x"000000000001"; --address2 (47 downto 0) = Fonte =
                            sen_frame_buffer (2879 downto 2832) <= x"000000000000"; --address3 (47 downto 0) = Destino =
                            sen_frame_buffer (2831 downto 2816) <= x"0011"; --sequencecontrol (15 downto 0) <= "0000000000010001"
                            sen_frame_buffer (2815 downto 2768) <= x"000000000000"; --não será setado--address4 (47 downto 0) =
                            sen_frame_buffer (2767 downto 2752) <= x"0000"; --não será setado qoscontrol (15 downto 0) = 
                            sen_frame_buffer (2751 downto 2752-(conv_integer(datagram_len)*8)) <= 
                             datagram_buffer (2719 downto 2720-(conv_integer(datagram_len)*8));
                            sen_frame_buffer (2751-(conv_integer(datagram_len)*8) downto
                                              2720-(conv_integer(datagram_len)*8)) <= x"ffffffff"; --= crc32bits (31 downto 0)
                            sen_frame_len_buffer <= std_logic_vector(unsigned(datagram_len)+288);
                        end if;
                    elsif firstloop = "10" and sifs_flag1 = '1' then
                        --send mac frame
                        sta_send_frame1 <= sen_frame_buffer;
                        sta_send_frame_len1 <= sen_frame_len_buffer;
                        
                        current_state <= WaitEndTX;
                        firstloop <= "00";
                       
                        
                        sifs_req1 <= '0';
                  
                        
                    end if;
                
                   
                when WaitEndTX => 
                    -- espera fim da transmissão do quadro
                    -- flag endtx deve ser dada pela camada física
                    if endtx111 = '0' then
                        current_state <= WaitEndTX;
--                        sta_send_frame1 <= (others => '0');

                    else
                        sta_send_frame1 <= (others => '0');
                        sta_send_frame_len1 <= x"0000";
                        if rec_frame_buffer (3007 downto 2992) = rts_frame_fc then
                            -- wait for data
                            current_state <= WaitDATA;
                            firstloop <= "00";
                        elsif rec_frame_buffer (3007 downto 2992) = data_frame_fc then
                            -- vá para idle
                            current_state <= Idle;
                        elsif rec_frame_buffer (3007 downto 2992) = cts_frame_fc then
                            -- vá para trans data
                            current_state <= WaitACK;
                        end if;
                    end if;
                
                ------------------------ recebimento ------------------------    
                when WaitDATA =>
                    if sta_rec_frame1 (3007 downto 2992) = data_frame_fc then
                        current_state <= RecData;
                        firstloop <= "01";
                        rec_frame_buffer <= sta_rec_frame1;
                        datagram_len <= std_logic_vector(unsigned(sta_rec_frame_len1)-36*8);
                        rec_frame_len_buffer <= sta_rec_frame_len1;
                        duration <= std_logic_vector (sta_rec_frame1(2991 downto 2976)); -- duration
                    else
                        current_state <= WaitDATA;
                    end if;
                
                when RecDATA =>
                    if rec_frame_buffer (3007 downto 2992) = data_frame_fc and firstloop = "01" then
                        current_state <= RecDATA;
                        firstloop <= "10";
--                        duration <= std_logic_vector(unsigned(duration) - 
--                                                     (unsigned(rec_frame_len_buffer)/rate_bps));
                    elsif firstloop = "10" then
                        current_state <= RecDATA;
                        firstloop <= "11";
                        rec_tcpipllc1 (2719 downto (2720-(conv_integer(datagram_len)))) <= 
                        rec_frame_buffer (2751 downto (2752-conv_integer(datagram_len)));
                    elsif firstloop = "11" then
                        if sta_send_ack1 = '1' then
                            current_state <= WaitSIFS;
                            firstloop <= "00";
                            sifs_req1 <= '1';
                            rec_tcpipllc1 <= (others => '0');
                        else
                            current_state <= RecDATA;
                        end if;
                    end if;
                
                ------------------------ envio ------------------------    
                when WaitNAV =>
                    if nav1 = '1' then
				        nav_req1 <= '1' ;      ------- Adicionado 
                        current_state <= WaitNAV;
                    else
                        current_state <= PerformCCADIFS;
                        firstloop <= "00";
                    end if;
                    
                when PerformCCADIFS =>
                    if nav1 = '1' then
                        current_state <= WaitNAV;
                    else
                        if channel_idle1 = '1' then --canal ocioso
                            -- não necessita backoff
                            -- necessita DIFS
                            if firstloop = "00" then
                                difs_req1 <= '1';
                                current_state <= PerformCCADIFS;
                                firstloop<= "01";----------------------Adicionado
                                VALOR1 <= to_integer (unsigned(datagram_len));
                                VALOR2 <=  ((115340/11534)); 
                            else
                                difs_req1 <= '0';
                                if difs_flag1 = '1' then
                                    current_state <= TransRTS;
                                    firstloop <= "00";
                                                -- x"00"
                                                
                        VALOR6 <= to_unsigned(VALOR1,8);
                        VALOR7 <= to_unsigned(VALOR2,8);                                                
                                else
                                    current_state <= PerformCCADIFS;
                                end if;
                                
                            end if;
                        else
                            -- necessita backoff
                            current_state <= WaitBackoff;
                            firstloop <= "00";             -- x"00"
                        end if;
                    end if;
                    
                when WaitBackoff =>
                    if firstloop = "00" then
                        firstloop <= "01";
                        backoff_req1 <= '1';
                        current_state <= WaitBackoff;
                    elsif firstloop = "01" then
                        if backoff_flag1 = '1' then
                            current_state <= PerformCCADIFS;
                            firstloop <= "00";
                        else
                            current_state <= WaitBackoff;
                        end if;
                    end if;
                    
                when TransRTS =>
                    if firstloop = "00" then
                        firstloop <= "01";
                        current_state <= TransRTS;
--                        VALOR1 <= to_integer (unsigned(datagram_len));
--                        VALOR2 <=  ((8000000/11534));
--                        VALOR6 <= to_unsigned(VALOR1,8);
--                        VALOR7 <= to_unsigned(VALOR2,8);
--                        VALOR4 <= (VALOR1*8000000000);;
--                        VALOR5 <= (VALOR4/11534336);
--                        VALOR3 <= std_logic_vector(VALOR1);
                        duration_int_data <= std_logic_vector(VALOR6*VALOR7);
--                        duration_int_data <= std_logic_vector(unsigned(datagram_len)/145);
--                          duration_int_data <= std_logic_vector(unsigned(datagram_len)*8000000/11534336);
                    elsif firstloop = "01" then
                        firstloop <= "10";
                        current_state <= TransRTS;
                        duration <= std_logic_vector( unsigned(duration_int_rts) + 
                                                      unsigned(duration_int_cts) +
                                                     unsigned(duration_int_data) +
                                                      unsigned(duration_int_ack) +
                                                                              84 ); --3*28 (sifs)
                      
                    elsif firstloop = "10" then
                        firstloop <= "11";
                        current_state <= TransRTS;
                        --preparar rts
                        sen_frame_buffer (3007 downto 2992) <= rts_frame_fc;--framecontrol (15 downto 0) <= "1000010010110100" = x"84B4"
                        sen_frame_buffer (2991 downto 2976) <= duration; --duration/id (15 downto 0) duração em microsegundos do rts_frame+sifs+cts_fram+sifs+dataframe+sifs+ack
                        sen_frame_buffer (2975 downto 2928) <= x"000000000000"; --endereço de destino
                        sen_frame_buffer (2927 downto 2880) <= x"000000000001"; --endereço de origem
                        sen_frame_buffer (2879 downto 2848) <= x"ffffffff"; --crc32bits
                    elsif firstloop = "11" then
                        sta_send_frame1 <= sen_frame_buffer;
                        sta_send_frame_len1 <= x"00a0"; --112 bits
                        firstloop <= "00";
                        current_state <= WaitCTS;
                    end if;
                
                when WaitCTS =>
                    sta_send_frame1 <= (others => '0');
                    if sta_rec_frame1 (3007 downto 2992) = cts_frame_fc and endtx1 = '1' then
                        current_state <= WaitSIFS;
                        duration <= std_logic_vector(unsigned(duration_int_data) +
                                                      unsigned(duration_int_ack) +
                                                                              56 ); --1*28 (sifs)
                       rec_frame_buffer <= sta_rec_frame1; -----------------------------------Adicionado
                        sifs_req1 <= '1';---------------------------- Adicionado -----------------------------
                    else
                        current_state <= WaitCTS;
                    end if;
                    
                when WaitACK =>
                    if sta_rec_frame1 (3007 downto 2992) = ack_frame_fc then
                        current_state <= Idle;
                    else
                        current_state <= WaitACK;
                    end if;
                    
            end case;
        end if;
    end if;
    end process;

 
END fsm;
